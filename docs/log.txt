Project changelog (Note, this log does not have to reflect the git log. I work irregularly on this
project so it can take quite some time between 2 commits. Due to these large time gaps I tend to
forget what I was working on. In order to remember what I was working on I will log my progress
in this file.):

YYYY-MM-DD: Changes
2019-07-15: - I added in an ad hoc way google test framework to my project and started writing
              some tests for the register class. I found that there was a bug with writing 2 bytes
              to a register pair. The high and low order of the bytes are not correctly handled and
              as such reading the individual components will result in reading the wrong values.
2019-07-14: - Added compiler options and improved the CMake script.
2019-07-12: - After yesterdays failure I removed my changes and picked up the CMake build system.
              I thought this change would be horribly difficult but with a few lines my project
              compiles the same way as it used to.
2019-07-11: - Added catch2 testing framework but I had problems testing private functions and
              compiling was also failing. I think I should stop using this testing framework and
              instead use the google test framework. The downside is that I also have to learn
              CMake.
2019-06-17: - I added the copyright notice at the top of every source file I created and also added
              an option to print the version of the emulator.
2019-06-16: - I found that Tetris enters an endless loop early on in execution. This is most likely
              due to a bug. I must start writing tests.
2019-06-15: - I let the cpu class check for an interrupt in the InterruptController class and
              process the signal in the Cpu class. Unfortunately I did not test the handling of
              interrupts since my test roms did not encounter the EI instruction which triggers
              interrupt handling.
2019-06-10: - Expended the interrupt controller by checking if interrupts need to be processed.
              Currently I want to execute an interrupt but I need to push the PC on the stack.
              This is so far only possible in the cpu class but I do not have access to this class
              from interrupt controller. Must find an elegant solution.
2019-06-09: - Added more checks for reading files since files that do not exist where also
              accepted.
2019-06-08: - I added DMA-Transfer but I was not executing. It is possible that DMA-Transfers are
              only triggered by interrupts. Also I renamed some types and functions.
2019-04-10: - I drew a simple triangle on screen.
2019-04-09: - Added basic shaders and a shader program.
2019-03-02: - Created a include file for the OpenGL loading library: Glad.
            - Improved the makefile to include the './include' folder.
2019-02-06: - Fixed popup: window not responding
2019-02-04: - Fixed bug with reading register B and C.
            - Added opcode support for EI and DI. Interrupts will be handled by ignoring them.
