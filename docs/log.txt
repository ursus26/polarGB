Project changelog (Note, this log does not have to reflect the git log. I work irregularly on this
project so it can take quite some time between 2 commits. Due to these large time gaps I tend to
forget what I was working on. In order to remember what I was working on I will log my progress
in this file.):

YYYY-MM-DD: Changes
2020-03-27: - Removed "executeLD8InternalRAM" because it was too complex and instead I used the
              simpler "executeLD8" function to read and write to HRAM.
            - Fixed I/O of HRAM. Due to a programming error, HRAM also incorrectly included OAM and
              the hardware registers while the read and write functions did not assume this.
            - Added MMU read and write tests.
2020-03-24: - I finished replacing printf, std::cerr, and std::cout with fmt::print. Now I have a
              single printing library that I can use instead of using both a C or a C++
              implementation at the same time.
2020-03-22: - Code clean up and refactor. It was mostly focused at the cpu, mmu and registers.
2020-03-19: - Refactored emulator loop and moved it from the CPU class to the emulator class.
            - Added LCD Status register logic. The emulator progresses further with the Tetris ROM
              for the first time since a year?? It now crashes 10 instructions further.
            - Managed to fix some instruction bugs and added call and return instructions. Now
              Tetris does not halt due to unimplemented instructions.
2020-03-18: - Forgot what happened the last 7 months.
            - Added stack support by re-adding push and pop.
            - Re-enabled interrupts. They are still not triggered due to the screen not updating and
              my test rom waits till the screen is drawn.
            - Code clean up, improved starting and shutting down the emulator by explicitly
              describing when to take those actions.
2019-08-28: - Instead of addressing yesterdays issue I continued working on implementing more
              instructions.
2019-08-27: - After some research into the documentation I found out that the display writes some
              information to memory so the cpu can poll the state of the display. Currently the
              cpu is stuck in an infinite loop because the it checks if the display has finished
              drawing all the display lines. Unfortunately the display does not update the memory
              and so nothing will happen.
2019-08-21: - Added a few more instructions. Tetris is now stuck in an infinite loop as before the
              big rewrite. I might have traced a bit of the problem. It has to do with the LCD
              control register that updates the LY register. In other gameboy emulators this value
              is updated but mine does not. I have to investigate if the LCD runs independently from
              the cpu.
2019-08-20: - Today I started working on implementing the execution handlers for a quarter of the
              instruction set. The other 3/4 are currently unavailable and must be re-implemented.
            - Improved printing of the instruction stream and it now roughly follows the same
              format as objdump.
            - Fixed a bug where the instruction 'DEC E' actually executes 'DEC D'.
2019-08-18: - Continuation of yesterdays work. I implemented some helper and loading functions for
              executing the instruction set. Now, most of the work will be to transform the handling
              of the current implementation to my newly created implementation.
2019-08-17: - To improve the logging I am changing the way the instructions are interpreted. I now
              create a struct that stores information about an instruction. This info struct makes
              it much easier to log about the executed instructions. This change does have a huge
              impact on the source code because a large portion has to be rewritten to fit the new
              system. The changes will mainly affect the Cpu class.
2019-08-16: - I wanted to work on the graphics side but I was not satisfied with my interpreter.
              I therefore set out to work on improving the logging of the instruction stream.
2019-07-16: - I am afraid that I messed up the endianness of the Gameboy in my code. The Gameboy
              is little-endian. I have to now check if I have implemented this correctly everywhere.
              What is extra weird is that the registers feel like they have the opposite but that
              is due to the naming. For instance register pair BC has the most significant byte in
              register B and the least significant byte in register C.
            - A bit later on I found that the return value of the pop instruction returns in my
              code a single byte instead of 2 bytes.
2019-07-15: - I added in an ad hoc way google test framework to my project and started writing
              some tests for the register class. I found that there was a bug with writing 2 bytes
              to a register pair. The high and low order of the bytes are not correctly handled and
              as such reading the individual components will result in reading the wrong values.
2019-07-14: - Added compiler options and improved the CMake script.
2019-07-12: - After yesterdays failure I removed my changes and picked up the CMake build system.
              I thought this change would be horribly difficult but with a few lines my project
              compiles the same way as it used to.
2019-07-11: - Added catch2 testing framework but I had problems testing private functions and
              compiling was also failing. I think I should stop using this testing framework and
              instead use the google test framework. The downside is that I also have to learn
              CMake.
2019-06-17: - I added the copyright notice at the top of every source file I created and also added
              an option to print the version of the emulator.
2019-06-16: - I found that Tetris enters an endless loop early on in execution. This is most likely
              due to a bug. I must start writing tests.
2019-06-15: - I let the cpu class check for an interrupt in the InterruptController class and
              process the signal in the Cpu class. Unfortunately I did not test the handling of
              interrupts since my test roms did not encounter the EI instruction which triggers
              interrupt handling.
2019-06-10: - Expended the interrupt controller by checking if interrupts need to be processed.
              Currently I want to execute an interrupt but I need to push the PC on the stack.
              This is so far only possible in the cpu class but I do not have access to this class
              from interrupt controller. Must find an elegant solution.
2019-06-09: - Added more checks for reading files since files that do not exist where also
              accepted.
2019-06-08: - I added DMA-Transfer but I was not executing. It is possible that DMA-Transfers are
              only triggered by interrupts. Also I renamed some types and functions.
2019-04-10: - I drew a simple triangle on screen.
2019-04-09: - Added basic shaders and a shader program.
2019-03-02: - Created a include file for the OpenGL loading library: Glad.
            - Improved the makefile to include the './include' folder.
2019-02-06: - Fixed popup: window not responding
2019-02-04: - Fixed bug with reading register B and C.
            - Added opcode support for EI and DI. Interrupts will be handled by ignoring them.
